}
names(imputedData) <- imputedNames
if(!is.null(save)){
save(imputedData, file = paste0(save, ".RData"))
}
if(is.null(save)){
return(imputedData)
}
}
tree <- simData$TreeList$`0`
strategies = strategies
varfrac = varfrac
#variables to define for imputation
nbrMI <- 1
k <- 2
numFun <- laeken::weightedMedian
catFun <- VIM::maxCat
hint <- NULL
strategies <- sort(strategies) #order is "2-step", "NP", "P"
imputedData <- vector()
imputedNames <- c()
naColumns <- which(colSums(is.na(data)) > 0)
classVar <- lapply(data, class)
contiColumns <- which(classVar == "numeric")
discColumns <- which(classVar != "numeric")
colNames <- names(data)
#PI
if(("pi_continuous_traits" %in% ImputationApproachesNames | "pi_categorical_traits" %in% ImputationApproachesNames &
"P" %in% strategies) | "2-step" %in% strategies){
imputedValue <- data
contiImputed <- NULL
discrImputed <- NULL
if(any(contiColumns %in% naColumns) & "pi_continuous_traits" %in% ImputationApproachesNames){
contiImputed <- pi_continuous_traits(data[ ,contiColumns[which(contiColumns %in% naColumns)], drop = FALSE], tree)
#contiImputed$imputedData <- exp(contiImputed$imputedData)
imputedValue[ ,contiColumns] <- contiImputed$imputedData
}
print("done Rphylopars")
if(any(discColumns %in% naColumns) & "pi_categorical_traits" %in% ImputationApproachesNames){
discrImputed <- pi_categorical_traits(data[ ,discColumns[which(discColumns %in% naColumns)], drop = FALSE], tree)
imputedValue[, discColumns] <- discrImputed$imputedData
}
print("done corHMM")
if("P" %in% strategies){
names(imputedValue) <- colNames
imputedData <- c(imputedData, list(imputedValue))
imputedName <- "PI"
imputedNames <- c(imputedNames, imputedName)
}
if("2-step" %in% strategies){
if(!is.null(contiImputed) & !is.null(discrImputed)){
hint <- cbind(contiImputed$imputedData, discrImputed$probabilities)
}
else if(!is.null(contiImputed) & is.null(discrImputed)){
hint <- contiImputed$imputedData
}
else{
hint <- discrImputed$probabilities
}
}
}
contiImputed
if(any(contiColumns %in% naColumns) & "pi_continuous_traits" %in% ImputationApproachesNames | "2-step" %in% strategies){
contiImputed <- pi_continuous_traits(data[ ,contiColumns[which(contiColumns %in% naColumns)], drop = FALSE], tree)
#contiImputed$imputedData <- exp(contiImputed$imputedData)
imputedValue[ ,contiColumns] <- contiImputed$imputedData
print("done Rphylopars")
}
library(TDIP)
contiImputed <- pi_continuous_traits(data[ ,contiColumns[which(contiColumns %in% naColumns)], drop = FALSE], tree)
#' @title Imputation of missing data in continuous traits
#' @description This function imputes missing data for continuous traits applying the phylopars approach.
#' @usage pi_continuous_trait(missingData, tree)
#' @param missingData data.frame of 1 or more numeric columns containing NAs
#' @param tree phylo object
#' @return a data.frame of 1 or more numeric columns with the NAs replaced by values + parameters used for the
#' imputation
#' @export
pi_continuous_trait <- function(missingData, tree){
Rphylopars <- tryCatch(
{
if(length(setdiff(rownames(missingData), tree$tip.label)) != 0){
rownames(missingData) <- tree$tip.label
}
#add species (tips) in the dataframe
missingData <- tibble::add_column(missingData, species = row.names(missingData) , .before = 1)
#impute
models <- c("BM", "OU")
AICs <- c()
imputations <- list()
phylo_correlated <- TRUE
pheno_correlated <- FALSE
for(i in 1:length(models)){
imputeData <- Rphylopars::phylopars(trait_data = missingData, tree = tree, model = models[i],
phylo_correlated = phylo_correlated, pheno_correlated = pheno_correlated)
imputations[[i]] <- imputeData
#Calculate AIC
LogLik <- imputeData$logLik
K <- imputeData$npars #get the number of degree of freedom (= the nbr of parameter in the model)
AIC <- 2 * K - 2 * LogLik
AICs <- c(AICs, AIC)
}
#keep only the imputed data
imputedData <- imputations[[which.min(AICs)]]$anc_recon
#keep only the tip labels and not the node labels
imputedData <- imputedData[1:nrow(missingData), , drop = FALSE]
#put again the tips names
rownames(imputedData) <- tree$tip.label
parameters <- list(model = imputations[[which.min(AICs)]]$model)
list(imputedData = imputedData, parameters = parameters)
},
error = function(cond){
message("Error running phylopars")
list(imputedData = missingData, parameters = "Error in Cholesky decomposition")
}
)
return(Rphylopars)
}
contiImputed <- pi_continuous_traits(data[ ,contiColumns[which(contiColumns %in% naColumns)], drop = FALSE], tree)
#' @title Imputation of missing data in continuous traits
#' @description This function imputes missing data for continuous traits applying the phylopars approach.
#' @usage pi_continuous_trait(missingData, tree)
#' @param missingData data.frame of 1 or more numeric columns containing NAs
#' @param tree phylo object
#' @return a data.frame of 1 or more numeric columns with the NAs replaced by values + parameters used for the
#' imputation
#' @export
pi_continuous_traits <- function(missingData, tree){
Rphylopars <- tryCatch(
{
if(length(setdiff(rownames(missingData), tree$tip.label)) != 0){
rownames(missingData) <- tree$tip.label
}
#add species (tips) in the dataframe
missingData <- tibble::add_column(missingData, species = row.names(missingData) , .before = 1)
#impute
models <- c("BM", "OU")
AICs <- c()
imputations <- list()
phylo_correlated <- TRUE
pheno_correlated <- FALSE
for(i in 1:length(models)){
imputeData <- Rphylopars::phylopars(trait_data = missingData, tree = tree, model = models[i],
phylo_correlated = phylo_correlated, pheno_correlated = pheno_correlated)
imputations[[i]] <- imputeData
#Calculate AIC
LogLik <- imputeData$logLik
K <- imputeData$npars #get the number of degree of freedom (= the nbr of parameter in the model)
AIC <- 2 * K - 2 * LogLik
AICs <- c(AICs, AIC)
}
#keep only the imputed data
imputedData <- imputations[[which.min(AICs)]]$anc_recon
#keep only the tip labels and not the node labels
imputedData <- imputedData[1:nrow(missingData), , drop = FALSE]
#put again the tips names
rownames(imputedData) <- tree$tip.label
parameters <- list(model = imputations[[which.min(AICs)]]$model)
list(imputedData = imputedData, parameters = parameters)
},
error = function(cond){
message("Error running phylopars")
list(imputedData = missingData, parameters = "Error in Cholesky decomposition")
}
)
return(Rphylopars)
}
contiImputed <- pi_continuous_traits(data[ ,contiColumns[which(contiColumns %in% naColumns)], drop = FALSE], tree)
discrImputed <- pi_categorical_traits(data[ ,discColumns[which(discColumns %in% naColumns)], drop = FALSE], tree)
load("ResultsDiscreteARD1Data_1_R1_0.05.RData")
load("ResultsDiscreteARD1Data_1_R1_0.05.RData")
imputedData$
$
inputedData
imputedData
imputedData <- saveData$imputedData$MCAR$`imputed_MCAR/13/0.05`
#select imputed dataset in the imputedData object
namesMethods <- c("MICE", "MissForest", "KNN")
namesToselect <- paste(namesMethods, "P", sep = "_")
namesImputedData <- names(imputedData)
namesImputedData
datasets <- imputedData[which(namesImputedData %in% namesToselect)]
#hard voting
hv <- hard_voting(listOfdataframe = datasets)
hv
#compute error for a data containing MCAR values
errors <- imputation_error(imputedData = imputedData,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods,
dataframe = simData$Dataframe)
imputedData <- simData$FinalData
#compute error for a data containing MCAR values
errors <- imputation_error(imputedData = imputedData,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods,
dataframe = simData$Dataframe)
library(TDIP)
library(naniar)
#install.packages("devtools")
library(devtools)
#install python
#install.packages("reticulate")
library(reticulate)
#load the data present in the package
data(dataframe)
param_tree <- list(0.4, 0.1, 100)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
#print some rows of the simulated data
head(simData$FinalData)
data(simulatedData)
data(tree)
simulatedData$Species <- rownames(simulatedData)
empData <- data_preprocessing(simulatedData,
empTree = NULL,
save = NULL)
head(empData$FinalData)
missingRate <- 0.05
#MCAR
mcar_values <- mcar_miss_meca(missingRate = missingRate,
ds = simData$FinalData, cols_mis = 1:ncol(simData$FinalData))
#PhyloNa
phyloNa_values <- phyloNa_miss_meca(missingRate = missingRate,
ds = simData$FinalData,
tree = simData$TreeList$`0`)
missing_values <- na_insertion(missingRate = missingRate,
dataset = simData$FinalData,
missingTraits = ncol(simData$FinalData),
MARTraits = 1,
MARctrlTraits = 3,
traitsNoNA = NULL,
tree = simData$TreeList$`0`,
save = NULL)
#visualize the amount of missing data
NaData <- missing_values$DataNaN
methods <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
strategies <- "NP"
varfrac <- 0.95
#impute missing MCAR values
imputedData <- missing_data_imputation(ImputationApproachesNames = methods,
data = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
tree = simData$TreeList$`0`,
strategies = strategies,
varfrac = varfrac,
save = NULL)
library(naniar)
#install.packages("devtools")
library(devtools)
#install python
#install.packages("reticulate")
library(reticulate)
#load the data present in the package
data(dataframe)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
#print some rows of the simulated data
head(simData$FinalData)
data(simulatedData)
data(tree)
simulatedData$Species <- rownames(simulatedData)
empData <- data_preprocessing(simulatedData,
empTree = tree,
save = NULL)
head(empData$FinalData)
missingRate <- 0.05
#MCAR
mcar_values <- mcar_miss_meca(missingRate = missingRate,
ds = simData$FinalData, cols_mis = 1:ncol(simData$FinalData))
#PhyloNa
phyloNa_values <- phyloNa_miss_meca(missingRate = missingRate,
ds = simData$FinalData,
tree = simData$TreeList$`0`)
missing_values <- na_insertion(missingRate = missingRate,
dataset = simData$FinalData,
missingTraits = ncol(simData$FinalData),
MARTraits = 1,
MARctrlTraits = 3,
traitsNoNA = NULL,
tree = simData$TreeList$`0`,
save = NULL)
#visualize the amount of missing data
NaData <- missing_values$DataNaN
methods <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
strategies <- "NP"
varfrac <- 0.95
#impute missing MCAR values
imputedData <- missing_data_imputation(ImputationApproachesNames = methods,
data = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
tree = simData$TreeList$`0`,
strategies = strategies,
varfrac = varfrac,
save = NULL)
#compute error for a data containing MCAR values
errors <- imputation_error(imputedData = imputedData,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods,
dataframe = simData$Dataframe)
#compute error for a data containing MCAR imputed by missForest
errors <- imputation_error(imputedData = imputedData$MissForest_NP,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods,
dataframe = simData$Dataframe)
imputedData <- imputedData$MissForest_NP
trueData <- simData$FinalData
missingData <- NaData$MCAR$`MCAR/13/0.05`
imputationApproachesName <- "missforest"
dataframe <- simData$Dataframe
#get the ordinal trait reference
ordinalTraits <- which(dataframe$class == "ordinal") #give the row in dataframe which correspond to /n in data names
errors <- c()
traitNames <- c()
for (c in 1:ncol(missingData)){
#know is NaNs in the columns(trait)
NaNRowIndex <- which(is.na(missingData[,c]))
if(length(NaNRowIndex != 0)){
traitNames <- c(traitNames, names(trueData)[c])
#missingValues <- missingData[NaNRowIndex, c]
trueValues <- trueData[NaNRowIndex, c]
imputedValues <- imputedData[NaNRowIndex, c]
#in case continuous data
classVar <- class(trueData[,c])
contiColumns <- which(classVar == "numeric")
if(length(contiColumns) != 0){
print("continuous")
#rmse
error <- sqrt(mean((as.numeric(imputedValues) - as.numeric(trueValues))^2))
}
#in case ordinal trait
else if(length(ordinalTraits) != 0 & length(grep(paste0("/", ordinalTraits), names(missingData)[c])) == 1){
print("ordinal")
#imputation error for ordinal traits (absolute error)
error <- mean(abs((as.numeric(imputedValues) - as.numeric(trueValues)) / as.numeric(trueValues)))
}
#in case discrete data
else{
print("discrete")
error <- (sum(as.character(imputedValues) != as.character(trueValues)) / length(trueValues))
#error <- length(setdiff(imputedValues, trueValues)) / length(trueValues)
}
errors <- c(errors, error)
}
}
output <- data.frame(trait = traitNames, c2 = errors)
names(output)[2] <- imputationApproachesName
#compute error for a data containing MCAR imputed by missForest
errors <- imputation_error(imputedData = imputedData$MissForest_NP,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods[2],
dataframe = simData$Dataframe)
library(TDIP)
install_github("Matgend/TDIP", build_vignettes = T)
install_github("TDIP", build_vignettes = T)
install_github("Matgend/TDIP", build_vignettes = T)
library(TDIP)
library(naniar)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("devtools")
library(devtools)
#install python
#install.packages("reticulate")
library(reticulate)
#load the data present in the package
data(dataframe)
param_tree <- list(0.4, 0.1, 100)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
data(simulatedData)
data(tree)
simulatedData$Species <- rownames(simulatedData)
empData <- data_preprocessing(simulatedData,
empTree = NULL,
save = NULL)
empData <- data_preprocessing(simulatedData,
empTree = tree,
save = NULL)
head(empData$FinalData)
missingRate <- 0.05
#MCAR
mcar_values <- mcar_miss_meca(missingRate = missingRate,
ds = simData$FinalData, cols_mis = 1:ncol(simData$FinalData))
#MAR
mar_values <- mar_miss_meca(missingRate = missingRate,
ds = simData$FinalData,
cols_mis = 1,
cols_ctrl = 3)
#MNAR
mnar_values <- mnar_miss_meca(missingRate = missingRate,
ds = simData$FinalData,
cols_mis = colnames(simData$FinalData))
#PhyloNa
phyloNa_values <- phyloNa_miss_meca(missingRate = missingRate,
ds = simData$FinalData,
tree = simData$TreeList$`0`)
missing_values <- na_insertion(missingRate = missingRate,
dataset = simData$FinalData,
missingTraits = ncol(simData$FinalData),
MARTraits = 1,
MARctrlTraits = 3,
traitsNoNA = NULL,
tree = simData$TreeList$`0`,
save = NULL)
#visualize the amount of missing data
NaData <- missing_values$DataNaN
methods <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
#strategies <- c("NP", "P", "2-step")
strategies <- "NP"
varfrac <- 0.95
#impute missing MCAR values
imputedData <- missing_data_imputation(ImputationApproachesNames = methods,
data = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
tree = simData$TreeList$`0`,
strategies = strategies,
varfrac = varfrac,
save = NULL)
#select imputed dataset in the imputedData object
namesMethods <- c("MICE", "MissForest", "KNN")
namesToselect <- paste(namesMethods, "P", sep = "_")
namesImputedData <- names(imputedData)
datasets <- imputedData[which(namesImputedData %in% namesToselect)]
#hard voting
hv <- hard_voting(listOfdataframe = datasets)
datasets
#select imputed dataset in the imputedData object
namesMethods <- c("MICE", "MissForest", "KNN")
namesToselect <- paste(namesMethods, "P", sep = "_")
namesMethods
namesToselect
namesImputedData <- names(imputedData)
datasets <- imputedData[which(namesImputedData %in% namesToselect)]
datasets
namesImputedData
imputedData[which(namesImputedData %in% namesToselect)]
namesImputedData %in% namesToselect
namesMethods
namesToselect
namesImputedData
which(namesImputedData %in% namesToselect)
namesToselect
namesImputedData
#select imputed dataset in the imputedData object
namesMethods <- c("MICE", "MissForest", "KNN")
namesToselect <- paste(namesMethods, "NP", sep = "_")
namesImputedData <- names(imputedData)
datasets <- imputedData[which(namesImputedData %in% namesToselect)]
#hard voting
hv <- hard_voting(listOfdataframe = datasets)
#compute error for a data containing MCAR imputed by missForest
errors <- imputation_error(imputedData = imputedData$MissForest_NP,
trueData = simData$FinalData,
missingData = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
imputationApproachesName = methods[2],
dataframe = simData$Dataframe)
detach("package:TDIP", unload = TRUE)
install.packages("~/TDIP_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package = "TDIP")
methods <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
#strategies <- c("NP", "P", "2-step")
strategies <- "NP"
varfrac <- 0.95
#use_condaenv("TensorEnv")
#impute missing MCAR values
imputedData <- missing_data_imputation(ImputationApproachesNames = methods,
data = missing_values$DataNaN$MCAR$`MCAR/13/0.05`,
tree = simData$TreeList$`0`,
strategies = strategies,
varfrac = varfrac,
save = NULL)
library(TDIP)
library(TDIP)
library(naniar)
#install.packages("devtools")
library(devtools)
#install python
#install.packages("reticulate")
library(reticulate)
#load the data present in the package
data(dataframe)
param_tree <- list(0.4, 0.1, 100)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
#print some rows of the simulated data
#head(simData$FinalData)
#load the data present in the package
data(dataframe)
param_tree <- list(0.4, 0.1, 100)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
#print some rows of the simulated data
#head(simData$FinalData)
#load the data present in the package
data(dataframe)
param_tree <- list(0.4, 0.1, 100)
simData <- data_simulator(param_tree = param_tree,
dataframe = dataframe)
#print some rows of the simulated data
#head(simData$FinalData)
detach("package:TDIP", unload = TRUE)
install.packages("~/TDIP_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package = "TDIP")
install.packages("~/TDIP_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package = "TDIP")
install_github("Matgend/TDIP")
library(devtools)
library(TDIP)
